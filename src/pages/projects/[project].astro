---
import '../../styles/article.css';
import '../../styles/index.css';

import Card from '../../components/Card.astro';
import Layout from '../../layouts/Layout.astro';

import type { GetStaticPaths } from 'astro';
import type { CollectionEntry } from 'astro:content';
import { getCollection, render } from 'astro:content';
import { giscus } from 'spectre:globals';
import { timeToRead } from '../../common/service.astro';
import Icon from '../../components/Icon.astro';
import ImageGlow from '../../components/ImageGlow.astro';

interface Props {
    project: CollectionEntry<'projects'>;
}

const { project } = Astro.props;

export const getStaticPaths = (async () => {
    const projects = await getCollection("projects", (project) => project.data.draft !== true);

    return projects.map((project) => ({ params: { project: project.id }, props: { project } }));
}) satisfies GetStaticPaths;

const { Content, headings } = await render(project);
---
<Layout
    title={project.data.title}
    description={project.data.description}
    image={project.data.image}
>
    <div class="left" slot="left">
        <div class="toc-card">
            <Card style="margin-bottom: 1rem;">
                <h2 class="no-mt">Links</h2>
                <ul class="overview-list">
                    {project.data.info.map((info) => {
                        const Tag = info.link ? 'a' : 'div';
                        return (
                        <li>
                            <Tag href={info.link} class='socials-link' target="_blank">
                                <Icon type={info.icon.type} name={info.icon.name as any} width={25} height={25} class='glow-icon' />
                                <span>{info.text}</span>
                            </Tag>
                        </li>
                        )
                    })}
                </ul>
            </Card>
            <Card>
                <h2 class="no-mt">Table of contents</h2>
                <ol>
                <li class="toc-li">
                    <a href={`#_top`} class="active">{project.data.title}</a>
                </li>
                {headings.map((heading, i) => (
                    <li class="toc-li" data-depth={heading.depth}>
                    <a href={`#${heading.slug}`}>{heading.text}</a>
                    </li>
                ))}
                </ol>
            </Card>
        </div>
    </div>
    <article slot="right" data-pagefind-body>
        <div class="layout-grid-right" slot="right">
        <Card>
            <div id="_top" data-pagefind-ignore>
                <div class="header-container">
                    <Icon
                        type="lucide"
                        name={project.data.icon.name as any}
                        width={25}
                        height={25}
                        class="glow-icon"
                    />
                    <h2>{project.data.title}</h2>
                </div>
                {project.data.image && <ImageGlow quality={100} class="article-image" src={project.data.image} alt={project.data.title} />}
                
                <p class="project-info">{timeToRead(project)} minute{timeToRead(project) === 1 ? "" : "s"} to read</p>
                
            </div>
            <div class="test">
                <Content />
            </div>
            <hr class="end-of-article" />
            <a href="/projects" class="block-link" data-pagefind-ignore>‚Üê Back to projects</a>
        </Card>
        {giscus && (
            <Card>
              <div class="comments" data-pagefind-ignore>
                <script
                  is:inline
                  src="https://giscus.app/client.js"
                  data-repo={giscus.repository}
                  data-repo-id={giscus.repositoryId}
                  data-category={giscus.category}
                  data-category-id={giscus.categoryId}
                  data-mapping={giscus.mapping}
                  data-strict={giscus.strict === true ? "1" : "0"}
                  data-reactions-enabled={giscus.reactionsEnabled === true ? "1" : "0"}
                  data-emit-metadata={giscus.emitMetadata === true ? "1" : "0"}
                  data-input-position={giscus.commentsInput}
                  data-lang={giscus.lang}
                  data-loading="lazy"
                  data-theme="catppuccin_mocha"
                  crossorigin="anonymous"
                  async
                />
              </div>
            </Card>
          )}
    </article>
</Layout>
<script src="../../scripts/toc.ts" />
<style>
    a {
        text-decoration: none;;
    }
    .project-info {
        display: flex;
        flex-direction: row;
        gap: 0.5rem;
        font-family: "Ghost Mono", monospace;
        background: var(--white);
        color: var(--darkest-purple);
        box-decoration-break: clone;
        -webkit-box-decoration-break: clone;
        padding: 0 0.75rem;
        width: fit-content;
    }
</style>